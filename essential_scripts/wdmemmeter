#!/bin/sh
#
# USB WD My Book Fuel Gauge "mem meter" script
# Copyright (C) 2007 Jonathan Krishnanantham, AsGF2MX@gmail.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, version 2.
#
# How it works:
# This script takes in the disk path (/dev/sdX<optional partition no.>)
# on which the leds are to be manipulated. It then calculates the RAM
# usage based on data from "free" and displays the value accordingly.
#

# Usage and help statements
usage="Usage: wdmemmeter [-d disk] [-hq]" ;
help="Valid options: \n
-d [disk path] - this path must be of the form /dev/sdX \n
-h - prints this message \n
-q - quiet mode " ;

# Quiet mode, default = off
quiet=false ;

# Error statements
e_exitstatus="Info: wdsetleds exited with code : ";
e_multidisk="Error: Multiple disks specified." ;
e_nodisk="Error: No disk specified." ;
e_setledfailed="Error: Failed to set leds. Run wdsetleds for further details.";
e_specifyone="Specify only one value." ;

# Option error code
E_OPTERROR=65 ;

# If no arguments were provided,return usage and set exit code
if [ $# -eq 0 ] ;
then
  echo $usage ;
  exit $E_OPTERROR ;
fi

# Get all the options
while getopts "d:qh" options ;
do
  case $options in
    d ) if [ -z "$disk" ] ;
        then
          disk=$OPTARG ;
        else
          echo $e_multidisk $e_specifyone ;
          exit $E_OPTERROR ;
        fi ;;
    q ) quiet=true      ;;
    h ) echo $usage     ;
        echo -e $help   ;
        exit 0          ;;
    [?] ) echo $usage   ;
          exit 1        ;;
    * ) echo $usage     ;
        exit 1          ;;
  esac
done
             
# If no disk was specified, quit.
if [ -z "$disk" ] ;
then
  if [ $quiet = false ] ;
  then
    echo $e_nodisk ;
  fi
  exit $E_OPTERROR ;
fi

# Get the used RAM in MB
usedram="$(free -mto | grep Mem: | awk '{ print $3 }')" ;

# Get the total RAM in MB
totalram="$(free -mto | grep Mem: | awk '{ print $2 }')" ;

# Calculate the percentage in use
utilized=$(echo "scale=0; 100*$usedram/$totalram" | bc) ;

# Determine the led value to be set based on usage percentage
# 0-3 %
if [ $utilized -ge 0 ] && [ $utilized -lt 4 ] ;
then
  ledvalue=0 ;
#  4-20 %
elif [ $utilized -ge 4 ] && [ $utilized -lt 20 ] ;
then
  ledvalue=1 ;
#  20-35 %
elif [ $utilized -ge 20 ] && [ $utilized -lt 36 ] ;
then
  ledvalue=3 ;
#  36-51 %
elif [ $utilized -ge 36 ] && [ $utilized -lt 52 ] ;
then
  ledvalue=7 ;
#  52-67 %
elif [ $utilized -ge 52 ] && [ $utilized -lt 68 ] ;
then
  ledvalue=15 ;
#  68-83 %
elif [ $utilized -ge 68 ] && [ $utilized -lt 84 ] ;
then
  ledvalue=31 ;
#  84-100 %
elif [ $utilized -ge 84 ] && [ $utilized -le 100 ] ;
then
  ledvalue=63 ;
fi

# Now call the setleds script
wdsetleds -d $disk -s $ledvalue -q  ;

# Store the wdsetleds exit status
wdsetledstatus=$? ;

# If the leds failed to be set.
if [ $wdsetledstatus -ne 0 ] ;
  then
    # Display message if quiet is unset
    if [ $quiet = false ] ;
    then
      echo $e_setledfailed ;
      echo $e_exitstatus $wdsetledstatus ;
    fi
fi

# Return wdsetleds exit status.
exit $wdsetledstatus ;
